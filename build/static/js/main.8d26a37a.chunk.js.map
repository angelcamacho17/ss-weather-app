{"version":3,"sources":["apiConfig.js","day-card/DayCard.js","week-container/WeekContainer.js","App.js","serviceWorker.js","index.js"],"names":["mykey","moment","require","DayCard","reading","newDate","Date","weekday","dt","setTime","imgURL","weather","id","className","format","Math","round","main","temp","max","mini","description","WeekContainer","state","fullData","dailyData","componentDidMount","weatherURL","fetch","then","res","json","data","list","filter","dt_txt","includes","setState","getMaxMinPerDay","console","log","formatDayCards","map","index","key","maxWea","Map","minWea","day","date","split","get","temp_max","set","obj","indexOf","temp_min","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8d26a37a.chunk.js","sourcesContent":["export const mykey = '79a1afb8b7f7a545a464c897a77f1eaa';","\r\nimport React from 'react';\r\nvar moment = require('moment');\r\n\r\nconst DayCard = ({ reading }) => {\r\n  let newDate = new Date();\r\n  const weekday = reading.dt * 1000\r\n  newDate.setTime(weekday)\r\n\r\n  const imgURL = `owf owf-${reading.weather[0].id} owf-5x`\r\n\r\n  return (\r\n      <div className=\"col-sm-2\">\r\n      <div className=\"card\">\r\n        <h3 className=\"card-title\">{moment(newDate).format('dddd')}</h3>\r\n        <p className=\"text-muted\">{moment(newDate).format('MMMM Do, h:mm a')}</p>\r\n        <i className={imgURL}></i>\r\n        <h2>{Math.round(reading.main.temp)} Â°F</h2>\r\n        <div className=\"card-body\">\r\n          <div className=\"max\">Max temp: {reading.max} </div>\r\n          <div className=\"max\">Min temp: {reading.mini} </div>\r\n          <p className=\"card-text\">{reading.weather[0].description}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DayCard;","import React from 'react';\r\nimport { mykey } from '../apiConfig';\r\nimport DayCard from '../day-card/DayCard'\r\nimport './WeekContainer.scss';\r\nimport { max } from 'moment';\r\n\r\nclass WeekContainer extends React.Component {\r\n    state = {\r\n        fullData: [],\r\n        dailyData: [],\r\n    }\r\n\r\n    getMaxMinPerDay(fullData, dailyData){\r\n        let maxWea = new Map()\r\n        let minWea = new Map()\r\n        for (let day of fullData){\r\n            let date= day.dt_txt.split(\" \")[0];\r\n            if (maxWea.get(date)){\r\n                if (day.main.temp_max > maxWea.get(date)){\r\n                    maxWea.set(date, day.main.temp_max)\r\n                    let obj = dailyData.filter(reading => {\r\n                        return reading.dt_txt.split(\" \")[0] === day.dt_txt.split(\" \")[0]\r\n                    })\r\n                    obj = obj[0]\r\n                    const index = dailyData.indexOf(obj)\r\n                    dailyData[index].max = day.main.temp_max;\r\n                }\r\n                \r\n            } else {\r\n                maxWea.set(date, day.main.temp_max)\r\n            }\r\n            if (day.main.temp_min < minWea.get(date)){\r\n                minWea.set(date, day.main.temp_min)\r\n                let obj = dailyData.filter(reading => {\r\n                    return reading.dt_txt.split(\" \")[0] === day.dt_txt.split(\" \")[0]\r\n                })\r\n                obj = obj[0]\r\n                const index = dailyData.indexOf(obj)\r\n                dailyData[index].mini = day.main.temp_min;\r\n            }else {\r\n                minWea.set(date, day.main.temp_min)\r\n            }\r\n        }\r\n        return dailyData;\r\n    }\r\n    \r\n    componentDidMount = () => {\r\n        const weatherURL =\r\n        `http://api.openweathermap.org/data/2.5/forecast?q=santiago,cl&units=metric&APPID=${mykey}`\r\n        fetch(weatherURL)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"))\r\n          this.setState({\r\n              fullData: data.list,\r\n              dailyData: this.getMaxMinPerDay(data.list, dailyData)\r\n            }, () => console.log(this.state))\r\n        })\r\n    }\r\n    formatDayCards = () => {\r\n        return this.state.dailyData.map((reading, index) => <DayCard reading={reading} key={index} />)\r\n    }\r\n  render() {\r\n\r\n    return (\r\n        <div className=\"container\">\r\n        <h1 className=\"display-1 jumbotron\">5-Day Forecast.</h1>\r\n        <h5 className=\"display-5 text-muted\">Santiago metropolitan region, CL</h5>\r\n          <div className=\"content\">\r\n            <div className=\"cards\">\r\n                {this.formatDayCards()}\r\n            </div>\r\n          </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WeekContainer;","import React, { Component } from 'react';\nimport './App.css';\nimport WeekContainer from './week-container/WeekContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <WeekContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}