{"version":3,"sources":["day-card/DayCard.js","week-container/WeekContainer.js","graph/BarGraph.js","day/Day.js","App.js","apiConfig.js","serviceWorker.js","index.js"],"names":["moment","require","DayCard","props","state","newDate","weekdat","imgURL","goToDay","bind","this","history","push","reading","dt_txt","split","dayDate","Date","week","dt","setState","setTime","weekday","weather","id","className","onClick","format","Math","round","main","temp","max","mini","description","React","Component","WeekContainer","formatDayCards","dailyData","map","index","key","console","log","fullData","BarGraph","percentage","width","height","data","JSON","parse","stringify","xMax","yMax","x","d","y","xScale","scaleBand","rangeRound","domain","padding","yDomainMax","yScale","scaleLinear","sqrt","compose","scale","accessor","xPoint","yPoint","i","barHeight","Group","Bar","bandwidth","fill","AxisLeft","top","left","hideZero","label","stroke","tickTextFill","numTicks","axisClassName","AxisBottom","Text","defaultProps","Day","day","match","params","dayStats","App","componentDidMount","weatherURL","fetch","then","res","json","list","filter","includes","getMaxMinPerDay","maxWea","Map","minWea","date","get","temp_max","set","obj","indexOf","temp_min","exact","path","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1a6686a7.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport './DayCard.scss'\r\nvar moment = require('moment');\r\n\r\nclass DayCard extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      newDate: '',\r\n      weekdat: '',\r\n      imgURL: ''\r\n    }\r\n    this.goToDay = this.goToDay.bind(this)\r\n  }\r\n  goToDay(){\r\n    this.props.history.push('/' + this.props.reading.dt_txt.split(\" \")[0])\r\n  }\r\n  \r\n  componentWillMount() {\r\n    let dayDate = new Date();\r\n    const week = this.props.reading.dt * 1000;\r\n    \r\n    this.setState({\r\n      newDate: dayDate.setTime(week),\r\n      weekday: week,\r\n      imgURL:`owf owf-${this.props.reading.weather[0].id} owf-5x`\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"col-sm-2\" onClick={this.goToDay}>\r\n      <div className=\"card\" >\r\n        <h3 className=\"card-title\">{moment(this.state.newDate).format('dddd')}</h3>\r\n        <p className=\"text-muted\">{moment(this.state.newDate).format('MMMM Do, h:mm a')}</p>\r\n        <i className={this.state.imgURL}></i>\r\n        <h2>{Math.round(this.props.reading.main.temp)} °C</h2>\r\n        <div className=\"card-body\">\r\n          <div className=\"max\">Max temp: {this.props.reading.max} </div>\r\n          <div className=\"max\">Min temp: {this.props.reading.mini} </div>\r\n          <p className=\"card-text\">{this.props.reading.weather[0].description}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\n// const xDayCard = ({ reading }) => {\r\n//   let newDate = new Date();\r\n//   const weekday = reading.dt * 1000\r\n//   newDate.setTime(weekday)\r\n\r\n//   const imgURL = `owf owf-${reading.weather[0].id} owf-5x`;\r\n \r\n//   return (\r\n//     <div className=\"col-sm-2\">\r\n//       <div className=\"card\" >\r\n//         <h3 className=\"card-title\">{moment(newDate).format('dddd')}</h3>\r\n//         <p className=\"text-muted\">{moment(newDate).format('MMMM Do, h:mm a')}</p>\r\n//         <i className={imgURL}></i>\r\n//         <h2>{Math.round(reading.main.temp)} °C</h2>\r\n//         <div className=\"card-body\">\r\n//           <div className=\"max\">Max temp: {reading.max} </div>\r\n//           <div className=\"max\">Min temp: {reading.mini} </div>\r\n//           <p className=\"card-text\">{reading.weather[0].description}</p>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\nexport default DayCard;","import React from 'react';\r\nimport { mykey } from '../apiConfig';\r\nimport DayCard from '../day-card/DayCard'\r\nimport './WeekContainer.scss';\r\n\r\nclass WeekContainer extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        console.log(this.props.fullData)\r\n        this.goToDay = this.goToDay.bind(this)\r\n    }\r\n\r\n    goToDay(){\r\n        console.log('here')\r\n    }\r\n\r\n    formatDayCards = () => {\r\n        if (this.props.dailyData){\r\n            return this.props.dailyData.map((reading, index) => <DayCard {...this.props} reading={reading} key={index} />)\r\n        } else {\r\n            return []\r\n        }\r\n    }\r\n  render() {\r\n\r\n    return (\r\n        <div className=\"container\">\r\n        <h1 className=\"display-1 jumbotron\">5-Day Forecast.</h1>\r\n        <h5 className=\"display-5 text-muted\">Santiago metropolitan region, CL</h5>\r\n          <div className=\"content\">\r\n            <div className=\"cards\">\r\n                {this.formatDayCards()}\r\n            </div>\r\n          </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WeekContainer;","import React from 'react';\r\nimport { Group } from '@vx/group';\r\nimport { Bar } from '@vx/shape';\r\nimport { scaleLinear, scaleBand } from '@vx/scale';\r\nimport { AxisLeft, AxisBottom } from '@vx/axis';\r\nimport { Text } from '@vx/text';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Finally we'll embed it all in an SVG\r\nfunction BarGraph(props) {\r\n  const { percentage, width, height } = props;\r\n  const data_raw = JSON.parse(JSON.stringify(props.data));\r\n\r\n  // Need to do some counting if percentage graphs are requested\r\n  let data = [];\r\n  let percentSymbol = percentage ? '%' : '';\r\n  data = data_raw;\r\n\r\n  // Define the graph dimensions and margins\r\n  const margin = { top: 20, bottom: 20, left: 40, right: 40 };\r\n\r\n  // Then we'll create some bounds\r\n  const xMax = width - margin.left - margin.right;\r\n  const yMax = height - margin.top - margin.bottom;\r\n\r\n  // We'll make some helpers to get at the data we want\r\n  const x = d => d.dt_txt.split(\" \")[1];\r\n  const y = d => d.main.temp;\r\n\r\n  // Given the max on the y-bar, figure out how much \"top margin\" we should add\r\n  const yMargin = max => {\r\n    return Math.sqrt(max);\r\n  };\r\n\r\n  // And then scale the graph by our data\r\n  const xScale = scaleBand({\r\n    rangeRound: [0, xMax],\r\n    domain: data.map(x),\r\n    padding: 0.4\r\n  });\r\n\r\n  const yDomainMax = Math.max(...data.map(y));\r\n\r\n  const yScale = scaleLinear({\r\n    rangeRound: [yMax, 0],\r\n    domain: [0, yDomainMax + yMargin(yDomainMax)]\r\n  });\r\n\r\n  // Compose together the scale and accessor functions to get point functions\r\n  const compose = (scale, accessor) => data => scale(accessor(data));\r\n  const xPoint = compose(\r\n    xScale,\r\n    x\r\n  );\r\n  const yPoint = compose(\r\n    yScale,\r\n    y\r\n  );\r\n\r\n  return (\r\n    <svg width={width} height={height}>\r\n      {data.map((d, i) => {\r\n        const barHeight = yMax - yPoint(d);\r\n        return (\r\n          <Group key={`bar-${i}`}>\r\n            <Bar\r\n              x={xPoint(d) + 60}\r\n              y={yMax - barHeight}\r\n              height={barHeight}\r\n              width={xScale.bandwidth()}\r\n              fill=\"#3399F3\"\r\n            />\r\n            <AxisLeft\r\n              scale={yScale}\r\n              top={0}\r\n              left={60}\r\n              hideZero\r\n              label={'Temperature'}\r\n              stroke={'#1b1a1e'}\r\n              tickTextFill={'#1b1a1e'}\r\n              numTicks={5}\r\n              axisClassName=\"leftAxis\"\r\n            />\r\n            <AxisBottom\r\n              scale={xScale}\r\n              top={yMax}\r\n              left={60}\r\n              hideZero\r\n              label={'Hours'}\r\n              stroke={'#1b1a1e'}\r\n              tickTextFill={'#1b1a1e'}\r\n              axisClassName=\"rightAxis\"\r\n            />\r\n            <Text\r\n              x={xPoint(d) + 60 + xScale.bandwidth() / 2 - 5}\r\n              y={yMax - barHeight - 5}\r\n            >{`${d.main.temp} °C`}</Text>\r\n          </Group>\r\n        );\r\n      })}\r\n    </svg>\r\n  );\r\n}\r\n\r\nBarGraph.propTypes = {\r\n  data: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      dt_txt: PropTypes.string,\r\n      main:{\r\n        temp: PropTypes.number\r\n      } \r\n    })\r\n  ).isRequired,\r\n  percentage: PropTypes.bool,\r\n  width: PropTypes.number,\r\n  height: PropTypes.number\r\n};\r\n\r\nBarGraph.defaultProps = {\r\n  percentage: false,\r\n  width: 600,\r\n  height: 300\r\n};\r\n\r\nexport default BarGraph;\r\n","import React from 'react';\r\nimport BarGraph from '../graph/BarGraph'\r\n\r\nclass Day extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            day: props.match.params.day,\r\n            data: []\r\n        }\r\n        console.log(props.match);\r\n        console.log(this.props.fullData)\r\n        this.dayStats = this.dayStats.bind(this)\r\n\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.dayStats()\r\n    }\r\n    \r\n    componentDidMount() {\r\n        console.log(this.props.fullData)\r\n    }\r\n\r\n    dayStats(){\r\n        console.log(this.props.fullData)\r\n        if(this.props.fullData){\r\n            for (let reading of this.props.fullData){\r\n                console.log(reading.dt_txt.split(\" \")[0])\r\n                console.log(this.state.day)\r\n                if (reading.dt_txt.split(\" \")[0] === this.state.day){\r\n                    this.state.data.push(reading);\r\n                }\r\n            }\r\n            \r\n        }\r\n        console.log(this.state.data)\r\n    }\r\n\r\n  render() {\r\n    this.dayStats()\r\n    return (\r\n        <div className=\"container\">\r\n            <h3>Weather for the day {this.state.day}</h3>\r\n            <BarGraph data={this.state.data} percentage={false} width={600} height={300}/>\r\n        </div>\r\n    )\r\n  }\r\n\r\n}\r\nexport default Day;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport WeekContainer from './week-container/WeekContainer';\r\nimport Day from './day/Day';\r\nimport { mykey } from './apiConfig';\r\n\r\nclass App extends Component {\r\n   constructor(){\r\n     super()\r\n     this.state = {\r\n       fullData: [],\r\n       dailyData: [],\r\n    }\r\n   }\r\n\r\n  getMaxMinPerDay(fullData, dailyData){\r\n      let maxWea = new Map()\r\n      let minWea = new Map()\r\n      for (let day of fullData){\r\n          let date= day.dt_txt.split(\" \")[0];\r\n          if (maxWea.get(date)){\r\n              if (day.main.temp_max > maxWea.get(date)){\r\n                  maxWea.set(date, day.main.temp_max)\r\n                  let obj = dailyData.filter(reading => {\r\n                      return reading.dt_txt.split(\" \")[0] === day.dt_txt.split(\" \")[0]\r\n                  })\r\n                  obj = obj[0]\r\n                  const index = dailyData.indexOf(obj)\r\n              if (index!==-1){\r\n                dailyData[index].max = day.main.temp_max;\r\n\r\n              }\r\n\r\n              }\r\n              \r\n          } else {\r\n              maxWea.set(date, day.main.temp_max)\r\n          }\r\n          if (day.main.temp_min < minWea.get(date)){\r\n              minWea.set(date, day.main.temp_min)\r\n              let obj = dailyData.filter(reading => {\r\n                  return reading.dt_txt.split(\" \")[0] === day.dt_txt.split(\" \")[0]\r\n              })\r\n              obj = obj[0]\r\n              const index = dailyData.indexOf(obj)\r\n              if (index!==-1){\r\n                  dailyData[index].mini = day.main.temp_min;\r\n              }\r\n          }else {\r\n              minWea.set(date, day.main.temp_min)\r\n          }\r\n      }\r\n      return dailyData;\r\n  }\r\n\r\n  componentDidMount = () => {\r\n      const weatherURL =\r\n      `http://api.openweathermap.org/data/2.5/forecast?q=santiago,cl&units=metric&APPID=${mykey}`\r\n      fetch(weatherURL)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"))\r\n        this.setState({\r\n            fullData: data.list,\r\n            dailyData: this.getMaxMinPerDay(data.list, dailyData)\r\n          }, () => console.log(this.state))\r\n      })\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n         <Switch>\r\n         <Route\r\n          exact\r\n          path='/'\r\n          render={(props) => (\r\n            <WeekContainer {...props} fullData={this.state.fullData} dailyData={this.state.dailyData} />\r\n          )}\r\n          /><Route\r\n            exact\r\n            path='/:day'\r\n            render={(props) => (\r\n              <Day {...props} fullData={this.state.fullData}/>\r\n            )}\r\n          />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","export const mykey = '79a1afb8b7f7a545a464c897a77f1eaa';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}