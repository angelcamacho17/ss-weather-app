{"version":3,"sources":["shared/day-card/DayCard.js","components/week-container/WeekContainer.js","shared/graph/BarGraph.js","components/day/Day.js","shared/header/AppHeader.js","shared/footer/Footer.js","App.js","apiConfig.js","serviceWorker.js","index.js"],"names":["moment","require","DayCard","props","state","newDate","weekdat","imgURL","goToDay","bind","this","history","push","reading","dt_txt","split","dayDate","Date","week","dt","url","toString","weather","id","setState","setTime","weekday","className","onClick","format","Math","round","main","temp","max","mini","description","React","Component","WeekContainer","formatDayCards","dailyData","map","index","key","BarGraph","percentage","width","height","data","JSON","parse","stringify","xMax","yMax","x","d","y","xScale","scaleBand","rangeRound","domain","padding","yDomainMax","yScale","scaleLinear","sqrt","compose","scale","accessor","xPoint","yPoint","i","barHeight","Group","Bar","bandwidth","fill","AxisLeft","top","left","hideZero","label","stroke","tickTextFill","numTicks","axisClassName","AxisBottom","Text","defaultProps","Day","day","match","params","dayStats","fullData","value","AppHeader","to","goBack","Footer","href","target","App","componentDidMount","weatherURL","fetch","then","res","json","list","filter","includes","getMaxMinPerDay","setMax","obj","indexOf","maxTemp","Map","minTemp","console","log","date","get","set","undefined","setMin","exact","path","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.09b03c1e.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport './DayCard.scss'\r\nvar moment = require('moment');\r\n\r\nclass DayCard extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      newDate: '',\r\n      weekdat: '',\r\n      imgURL: ''\r\n    }\r\n    this.goToDay = this.goToDay.bind(this)\r\n  }\r\n  goToDay(){\r\n    this.props.history.push('/' + this.props.reading.dt_txt.split(\" \")[0])\r\n  }\r\n\r\n  componentWillMount() {\r\n    let dayDate = new Date();\r\n    const week = this.props.reading.dt * 1000;\r\n    let url= toString(`owf owf-${this.props.reading.weather[0].id} owf-5x`);\r\n\r\n    this.setState({\r\n      newDate: dayDate.setTime(week),\r\n      weekday: week,\r\n      imgURL: url\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"day-card\" onClick={this.goToDay}>\r\n        <h3 className=\"card-title\">{moment(this.state.newDate).format('dddd')}</h3>\r\n        <p className=\"text-muted\">{moment(this.state.newDate).format('MMMM Do, h:mm a')}</p>\r\n        <i className={`owf owf-${this.props.reading.weather[0].id} owf-5x`}></i>\r\n        <h2>{Math.round(this.props.reading.main.temp)} 째C</h2>\r\n        <div className=\"card-body\">\r\n          <div className=\"max\">max: {Math.round(this.props.reading.max)} 째C</div>\r\n          <div className=\"max\">min: {Math.round(this.props.reading.mini)} 째C</div>\r\n          <p className=\"card-text\">{this.props.reading.weather[0].description}</p>\r\n        </div>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\n// const xDayCard = ({ reading }) => {\r\n//   let newDate = new Date();\r\n//   const weekday = reading.dt * 1000\r\n//   newDate.setTime(weekday)\r\n\r\n//   const imgURL = `owf owf-${reading.weather[0].id} owf-5x`;\r\n\r\n//   return (\r\n//     <div className=\"col-sm-2\">\r\n//       <div className=\"card\" >\r\n//         <h3 className=\"card-title\">{moment(newDate).format('dddd')}</h3>\r\n//         <p className=\"text-muted\">{moment(newDate).format('MMMM Do, h:mm a')}</p>\r\n//         <i className={imgURL}></i>\r\n//         <h2>{Math.round(reading.main.temp)} 째C</h2>\r\n//         <div className=\"card-body\">\r\n//           <div className=\"max\">Max temp: {reading.max} </div>\r\n//           <div className=\"max\">Min temp: {reading.mini} </div>\r\n//           <p className=\"card-text\">{reading.weather[0].description}</p>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\nexport default DayCard;","import React from 'react';\r\nimport { mykey } from '../../apiConfig';\r\nimport DayCard from '../../shared/day-card/DayCard'\r\nimport './WeekContainer.scss';\r\nlet flag = true;\r\nclass WeekContainer extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.goToDay = this.goToDay.bind(this)\r\n    }\r\n\r\n    goToDay(){\r\n    }\r\n\r\n    formatDayCards = () => {\r\n        if (this.props.dailyData){\r\n            return this.props.dailyData.map((reading, index) => <DayCard {...this.props} reading={reading} key={index}/>)\r\n        } else {\r\n            return []\r\n        }\r\n    }\r\n  render() {\r\n\r\n    return (\r\n        <div className=\"week-container\">\r\n        <div className=\"page-content\">\r\n            <h5 className=\"display-4 text-muted city\">Santiago metropolitan region, CL</h5>\r\n            <div className=\"content\">\r\n                <div className=\"cards\">\r\n                    {this.formatDayCards()}\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WeekContainer;","import React from 'react';\r\nimport { Group } from '@vx/group';\r\nimport { Bar } from '@vx/shape';\r\nimport { scaleLinear, scaleBand } from '@vx/scale';\r\nimport { AxisLeft, AxisBottom } from '@vx/axis';\r\nimport { Text } from '@vx/text';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Finally we'll embed it all in an SVG\r\nfunction BarGraph(props) {\r\n  const { percentage, width, height } = props;\r\n  const data_raw = JSON.parse(JSON.stringify(props.data));\r\n\r\n  // Need to do some counting if percentage graphs are requested\r\n  let data = [];\r\n  let percentSymbol = percentage ? '%' : '';\r\n  data = data_raw;\r\n\r\n  // Define the graph dimensions and margins\r\n  const margin = { top: 20, bottom: 20, left: 40, right: 40 };\r\n\r\n  // Then we'll create some bounds\r\n  const xMax = width - margin.left - margin.right;\r\n  const yMax = height - margin.top - margin.bottom;\r\n\r\n  // We'll make some helpers to get at the data we want\r\n  const x = d => d.dt_txt.split(\" \")[1].split(\":\")[0] + ':' + d.dt_txt.split(\" \")[1].split(\":\")[1];\r\n  const y = d => d.main.temp;\r\n\r\n  // Given the max on the y-bar, figure out how much \"top margin\" we should add\r\n  const yMargin = max => {\r\n    return Math.sqrt(max);\r\n  };\r\n\r\n  // And then scale the graph by our data\r\n  const xScale = scaleBand({\r\n    rangeRound: [0, xMax],\r\n    domain: data.map(x),\r\n    padding: 0.4\r\n  });\r\n\r\n  const yDomainMax = Math.max(...data.map(y));\r\n\r\n  const yScale = scaleLinear({\r\n    rangeRound: [yMax, 0],\r\n    domain: [0, yDomainMax + yMargin(yDomainMax)]\r\n  });\r\n\r\n  // Compose together the scale and accessor functions to get point functions\r\n  const compose = (scale, accessor) => data => scale(accessor(data));\r\n  const xPoint = compose(\r\n    xScale,\r\n    x\r\n  );\r\n  const yPoint = compose(\r\n    yScale,\r\n    y\r\n  );\r\n\r\n  return (\r\n    <svg width={width} height={height}>\r\n      {data.map((d, i) => {\r\n        const barHeight = yMax - yPoint(d);\r\n        return (\r\n          <Group key={`bar-${i}`}>\r\n            <Bar\r\n              x={xPoint(d) + 60}\r\n              y={yMax - barHeight}\r\n              height={barHeight}\r\n              width={xScale.bandwidth()}\r\n              fill=\"#6610f2\"\r\n            />\r\n            <AxisLeft\r\n              scale={yScale}\r\n              top={0}\r\n              left={60}\r\n              hideZero\r\n              label={'Temperature'}\r\n              stroke={'#00000078'}\r\n              tickTextFill={'#6610f2'}\r\n              numTicks={5}\r\n              axisClassName=\"leftAxis\"\r\n            />\r\n            <AxisBottom\r\n              scale={xScale}\r\n              top={yMax}\r\n              left={60}\r\n              hideZero\r\n              label={'Hours'}\r\n              stroke={'#00000078'}\r\n              tickTextFill={'#6610f2'}\r\n              axisClassName=\"rightAxis\"\r\n            />\r\n            <Text\r\n              x={xPoint(d) + 40 + xScale.bandwidth() / 2 - 5}\r\n              y={yMax - barHeight - 5}\r\n            >{`${d.main.temp} 째C`}</Text>\r\n          </Group>\r\n        );\r\n      })}\r\n    </svg>\r\n  );\r\n}\r\n\r\nBarGraph.propTypes = {\r\n  data: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      dt_txt: PropTypes.string,\r\n      main:PropTypes.shape({\r\n        temp: PropTypes.number\r\n      })\r\n    })\r\n  ).isRequired,\r\n  percentage: PropTypes.bool,\r\n  width: PropTypes.number,\r\n  height: PropTypes.number\r\n};\r\n\r\nBarGraph.defaultProps = {\r\n  percentage: false,\r\n  width: 600,\r\n  height: 350\r\n};\r\n\r\nexport default BarGraph;\r\n","import React from 'react';\r\nimport BarGraph from '../../shared/graph/BarGraph';\r\nimport './Day.scss';\r\nvar moment = require('moment');\r\n\r\nclass Day extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            day: props.match.params.day,\r\n            data: []\r\n        }\r\n        this.dayStats = this.dayStats.bind(this)\r\n\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.dayStats()\r\n    }\r\n    \r\n    componentDidMount() {\r\n    }\r\n\r\n    dayStats(){\r\n        if(this.props.fullData){\r\n            for (let reading of this.props.fullData){\r\n                if (reading.dt_txt.split(\" \")[0] === this.state.day){\r\n                    this.state.data.push(reading);\r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n  render() {\r\n    this.dayStats()\r\n    return (\r\n        <div className=\"day-container\">\r\n            <div className=\"page-left\">\r\n                <div className=\"title\">\r\n                    <h3 className=\"city\">Santiago de Chile, CL</h3>\r\n                    <h5 className=\"time\">{moment(this.state.day).format('dddd')}</h5>\r\n                </div>\r\n                <div className=\"graph\">\r\n                    <BarGraph data={this.state.data} percentage={false}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"page-right\">\r\n                <h6 className=\"display-6\">Hours - Degrees</h6>\r\n                <div className=\"temperatures\">\r\n                    {this.state.data.map((value, index) => {\r\n                        let imgURL = `owf owf-${value.weather[0].id} owf-1  x`\r\n                        return <div className=\"temperature\" key={index}>\r\n                                    <i className={imgURL}></i>\r\n                                    \r\n                                    <span className=\"time\">\r\n                                        {value.dt_txt.split(\" \")[1].split(\":\")[0]}:\r\n                                        {value.dt_txt.split(\" \")[1].split(\":\")[1]} -\r\n                                    </span>\r\n                                    <span className=\"degrees\">\r\n                                        {Math.round(value.main.temp)} 째C\r\n                                    </span>\r\n                                </div>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n  }\r\n\r\n}\r\nexport default Day;\r\n","import React, { Component } from 'react';\r\nimport './AppHeader.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass AppHeader extends Component {\r\n    \r\n    render() {\r\n        return (\r\n            <Link to=\"/\">\r\n                <h1 className=\"display-4 header\" onClick={this.goBack}>Servi Senior 5-Day Forecast</h1>\r\n            </Link>\r\n        ) \r\n    }\r\n\r\n}\r\n\r\nexport default AppHeader;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Footer extends Component {\r\n    \r\n    render() {\r\n        return (\r\n        <footer>\r\n            <span>by </span>\r\n            <span className=\"resume-link\"> \r\n                <a href=\"https://angelcamacho17.github.io/resume/\" target=\"_blank\">\r\n                <span className=\"name\">\r\n                Angel Camacho\r\n                </span>\r\n                </a>\r\n            </span> - <span>Software Developer</span>\r\n        </footer>\r\n        ) \r\n    }\r\n\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport './App.scss';\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport WeekContainer from './components/week-container/WeekContainer';\r\nimport Day from './components/day/Day';\r\nimport { mykey } from './apiConfig';\r\nimport AppHeader from './shared/header/AppHeader';\r\nimport Footer from './shared/footer/Footer';\r\n\r\nclass App extends Component {\r\n   constructor(){\r\n     super()\r\n     this.state = {\r\n       fullData: [],\r\n       dailyData: [],\r\n    }\r\n    this.setMax = this.setMax.bind(this)\r\n   }\r\n\r\n  setMax(dailyData, day) {\r\n    let obj = dailyData.filter(reading => {\r\n      return reading.dt_txt === day.dt_txt.split(\" \")[0]+ \" 18:00:00\"\r\n    })\r\n    obj = obj[0]\r\n    const index = dailyData.indexOf(obj)\r\n    if (index!==-1){\r\n      dailyData[index].max = day.main.temp;\r\n\r\n    }\r\n    return dailyData\r\n  }\r\n\r\n  setMin(dailyData, day){\r\n    let obj = dailyData.filter(reading => {\r\n      return reading.dt_txt === day.dt_txt.split(\" \")[0] + \" 18:00:00\"\r\n    })\r\n    obj = obj[0]\r\n    const index = dailyData.indexOf(obj)\r\n    if (index!==-1){\r\n        dailyData[index].mini = Math.round(day.main.temp);\r\n    }\r\n    return dailyData;\r\n  }\r\n\r\n  getMaxMinPerDay(fullData, dailyData){\r\n      let maxTemp = new Map()\r\n      let minTemp = new Map()\r\n      console.log(fullData)\r\n      for (let day of fullData){\r\n          let date= day.dt_txt.split(\" \")[0];\r\n          // Fill maximums\r\n          if (maxTemp.get(date)){\r\n              if (day.main.temp > maxTemp.get(date)){\r\n                  maxTemp.set(date, day.main.temp)\r\n                  this.setMax(dailyData, day);\r\n              }\r\n              \r\n          } else {\r\n              if(maxTemp.get(date)===undefined){\r\n                maxTemp.set(date, day.main.temp)\r\n                this.setMax(dailyData, day);\r\n              }\r\n          }\r\n          // Fill minimuns\r\n          if (minTemp.get(date)){\r\n            if (Math.round(day.main.temp) < minTemp.get(date)){\r\n                minTemp.set(date, Math.round(day.main.temp))\r\n                this.setMin(dailyData, day)\r\n            }\r\n          } else {\r\n              if(minTemp.get(date)===undefined){\r\n                minTemp.set(date, Math.round(day.main.temp))\r\n                this.setMin(dailyData, day)\r\n              }\r\n          }\r\n        }\r\n        console.log(dailyData)\r\n      return dailyData;\r\n  }\r\n\r\n  componentDidMount = () => {\r\n      const weatherURL =\r\n      `http://api.openweathermap.org/data/2.5/forecast?q=santiago,cl&units=metric&APPID=${mykey}`\r\n      fetch(weatherURL)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"))\r\n        this.setState({\r\n            fullData: data.list,\r\n            dailyData: this.getMaxMinPerDay(data.list, dailyData)\r\n          })\r\n      })\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <AppHeader {...this.props}></AppHeader>\r\n         <Switch>\r\n         <Route\r\n          exact\r\n          path='/'\r\n          render={(props) => (\r\n            <WeekContainer {...props} fullData={this.state.fullData} dailyData={this.state.dailyData} />\r\n          )}\r\n          /><Route\r\n            exact\r\n            path='/:day'\r\n            render={(props) => (\r\n              <Day {...props} fullData={this.state.fullData}/>\r\n            )}\r\n          />\r\n        </Switch>\r\n        <Footer></Footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","export const mykey = '79a1afb8b7f7a545a464c897a77f1eaa';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}